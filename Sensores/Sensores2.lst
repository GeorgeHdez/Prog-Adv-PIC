CCS PCH C Compiler, Version 5.015, 5967               26-Dec-15 20:44

               Filename:   E:\padv\Sensores\Sensores2.lst

               ROM used:   368 bytes (1%)
                           Largest free fragment is 32400
               RAM used:   4 (0%) at main() level
                           38 (2%) worst case
               Stack used: 2 locations
               Stack size: 31

*
0000:  GOTO   011C
.................... #include <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses HS,NOPROTECT,NOWDT,NOLVP 
.................... #use delay(clock=20M) 
.................... #use RS232(rcv=pin_c7,xmit=pin_c6,baud=115200,bits=8,parity=N) 
....................  
.................... /*#int_rda 
.................... void pc_command() 
.................... { 
....................    if( kbhit()) 
....................       button = getc(); 
.................... } 
.................... */ 
....................  
.................... void sampling_ADC(); 
.................... void send_info_rs232(int16 , int16 , int16 , int16 , int16 ); 
....................  
.................... void main() 
*
011C:  CLRF   FF8
011E:  BCF    FD0.7
0120:  BSF    FB8.3
0122:  MOVLW  2A
0124:  MOVWF  FAF
0126:  MOVLW  00
0128:  MOVWF  FB0
012A:  MOVLW  A6
012C:  MOVWF  FAC
012E:  MOVLW  90
0130:  MOVWF  FAB
0132:  MOVF   FC1,W
0134:  ANDLW  C0
0136:  IORLW  0F
0138:  MOVWF  FC1
013A:  MOVLW  07
013C:  MOVWF  FB4
.................... { 
....................  
....................  enable_interrupts(int_rda); 
013E:  BSF    F9D.5
....................  enable_interrupts(global); 
0140:  MOVLW  C0
0142:  IORWF  FF2,F
....................  
....................   //Configuracion de ADC 
....................   setup_adc_ports(AN0_TO_AN8); 
0144:  MOVF   FC1,W
0146:  ANDLW  C0
0148:  IORLW  06
014A:  MOVWF  FC1
....................   setup_adc(ADC_CLOCK_DIV_64); 
014C:  MOVF   FC0,W
014E:  ANDLW  C0
0150:  IORLW  06
0152:  MOVWF  FC0
0154:  BSF    FC0.7
0156:  BSF    FC2.0
....................    
....................   char medicion; 
....................  
....................   while(TRUE) 
....................   { 
....................          medicion = getc(); 
0158:  BTFSS  F9E.5
015A:  BRA    0158
015C:  MOVFF  FAE,05
....................           
....................           
....................         if(medicion == 'x'){ 
0160:  MOVF   05,W
0162:  SUBLW  78
0164:  BNZ   016C
....................         sampling_ADC(); 
0166:  BRA    0056
....................         medicion  = 'z'; 
0168:  MOVLW  7A
016A:  MOVWF  05
....................         } 
016C:  BRA    0158
....................          
....................           
....................       
....................   } 
.................... } 
.................... void send_info_rs232(int16 a, int16 b, int16 c, int16 d, int16 e){ 
016E:  SLEEP 
....................  
....................     char data[10]; 
....................     int x; 
....................  
....................     data[0] = a; 
*
0004:  MOVFF  11,1B
....................     data[1] = a>>8; 
0008:  MOVFF  12,1C
....................     data[2] = b; 
000C:  MOVFF  13,1D
....................     data[3] = b>>8; 
0010:  MOVFF  14,1E
....................     data[4] = c; 
0014:  MOVFF  15,1F
....................     data[5] = c>>8; 
0018:  MOVFF  16,20
....................     data[6] = d; 
001C:  MOVFF  17,21
....................     data[7] = d>>8; 
0020:  MOVFF  18,22
....................     data[8] = e; 
0024:  MOVFF  19,23
....................     data[9] = e>>8; 
0028:  MOVFF  1A,24
....................  
....................     for(x = 0 ; x<10 ; x++){ 
002C:  CLRF   25
002E:  MOVF   25,W
0030:  SUBLW  09
0032:  BNC   0052
....................  
....................       printf("%c",data[x]); 
0034:  CLRF   03
0036:  MOVF   25,W
0038:  ADDLW  1B
003A:  MOVWF  FE9
003C:  MOVLW  00
003E:  ADDWFC 03,W
0040:  MOVWF  FEA
0042:  MOVFF  FEF,26
0046:  MOVF   26,W
0048:  BTFSS  F9E.4
004A:  BRA    0048
004C:  MOVWF  FAD
004E:  INCF   25,F
0050:  BRA    002E
....................  
....................     } 
0052:  GOTO   0118 (RETURN)
.................... } 
.................... void sampling_ADC() 
.................... { 
....................   int16 medicion[5]; 
....................  
....................   for(int j = 0; j <= 8; j++) 
0056:  CLRF   10
0058:  MOVF   10,W
005A:  SUBLW  08
005C:  BNC   00EE
....................     { 
....................       if (j==4) //Cambiar a AN8 
005E:  MOVF   10,W
0060:  SUBLW  04
0062:  BNZ   00AE
....................       { 
....................          j=8; 
0064:  MOVLW  08
0066:  MOVWF  10
....................          set_adc_channel(j); 
0068:  RLCF   10,W
006A:  MOVWF  00
006C:  RLCF   00,F
006E:  MOVLW  FC
0070:  ANDWF  00,F
0072:  MOVF   FC2,W
0074:  ANDLW  C3
0076:  IORWF  00,W
0078:  MOVWF  FC2
....................          delay_us(20); 
007A:  MOVLW  20
007C:  MOVWF  00
007E:  DECFSZ 00,F
0080:  BRA    007E
0082:  BRA    0084
0084:  NOP   
....................          medicion[j-4] = read_adc(); 
0086:  MOVLW  04
0088:  SUBWF  10,W
008A:  MOVWF  00
008C:  BCF    FD8.0
008E:  RLCF   00,F
0090:  MOVF   00,W
0092:  CLRF   03
0094:  ADDLW  06
0096:  MOVWF  FE9
0098:  MOVLW  00
009A:  ADDWFC 03,W
009C:  MOVWF  FEA
009E:  BSF    FC2.1
00A0:  BTFSC  FC2.1
00A2:  BRA    00A0
00A4:  MOVFF  FC3,FEF
00A8:  MOVFF  FC4,FEC
....................       } 
00AC:  BRA    00EA
....................  
....................       else 
....................       { 
....................          set_adc_channel(j); 
00AE:  RLCF   10,W
00B0:  MOVWF  00
00B2:  RLCF   00,F
00B4:  MOVLW  FC
00B6:  ANDWF  00,F
00B8:  MOVF   FC2,W
00BA:  ANDLW  C3
00BC:  IORWF  00,W
00BE:  MOVWF  FC2
....................          delay_us(20); 
00C0:  MOVLW  20
00C2:  MOVWF  00
00C4:  DECFSZ 00,F
00C6:  BRA    00C4
00C8:  BRA    00CA
00CA:  NOP   
....................          medicion[j] = read_adc(); 
00CC:  BCF    FD8.0
00CE:  RLCF   10,W
00D0:  CLRF   03
00D2:  ADDLW  06
00D4:  MOVWF  FE9
00D6:  MOVLW  00
00D8:  ADDWFC 03,W
00DA:  MOVWF  FEA
00DC:  BSF    FC2.1
00DE:  BTFSC  FC2.1
00E0:  BRA    00DE
00E2:  MOVFF  FC3,FEF
00E6:  MOVFF  FC4,FEC
....................          } 
00EA:  INCF   10,F
00EC:  BRA    0058
....................     } 
....................  
....................     send_info_rs232(medicion[0],medicion[1],medicion[2],medicion[3],medicion[4]); 
00EE:  MOVFF  07,12
00F2:  MOVFF  06,11
00F6:  MOVFF  09,14
00FA:  MOVFF  08,13
00FE:  MOVFF  0B,16
0102:  MOVFF  0A,15
0106:  MOVFF  0D,18
010A:  MOVFF  0C,17
010E:  MOVFF  0F,1A
0112:  MOVFF  0E,19
0116:  BRA    0004
0118:  GOTO   0168 (RETURN)
.................... } 

Configuration Fuses:
   Word  1: CC3F   PLL12 CPUDIV4 USBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
